{"version":3,"file":"sql-hint.min.js","sources":["../../../../src/codemirror/addon/hint/sql-hint.js"],"sourcesContent":["/*eslint-disable*/\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace duplicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n        // duplicate identifierQuotes\n        nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n        identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[`,;]/g, ''))\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n    addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n    });\n    addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n    );\n    if (!disableKeywords)\n      addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n  }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n"],"names":["mod","CodeMirror","tables","defaultTable","keywords","identifierQuote","CONS","Pos","cmpPos","isArray","val","Object","prototype","toString","call","getText","item","text","wrapTable","name","value","columns","getTable","toUpperCase","shallowClone","object","result","key","hasOwnProperty","match","string","word","len","length","sub","substr","addMatches","search","wordlist","formatter","i","push","displayText","cleanName","charAt","nameParts","split","replace","RegExp","join","insertIdentifierQuotes","escaped","eachWord","lineText","f","words","findTableByAlias","alias","editor","doc","fullQuery","getValue","aliasUpperCase","previousWord","table","separator","validRange","start","end","lastLine","getLineHandle","indexOfSeparator","indexOf","posFromIndex","unshift","prevItem","current","getCursor","query","getRange","wordUpperCase","registerHelper","options","input","parseTables","defaultTableName","disableKeywords","mode","modeOption","resolveMode","getKeywords","getIdentifierQuote","cur","token","getTokenAt","ch","slice","useIdentifierQuotes","cont","line","w","pop","aliasTable","oldTable","tableInsert","nameCompletion","objectOrClass","className","list","from","to","exports","module","require","define","amd"],"mappings":"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"}